library(methylationArrayAnalysis)
library(knitr)
library(limma)
library(minfi)
library(RColorBrewer)
library(missMethyl)
library(minfiData)
library(Gviz)
library(DMRcate)
library(stringr)
library(IlluminaHumanMethylationEPICmanifest)
library(IlluminaHumanMethylationEPICanno.ilm10b5.hg38)
# The manifest contains all of the annotation information for each of the CpG probes on the ann865k array.
ilm10b5.hg38 <- getAnnotation(IlluminaHumanMethylationEPICanno.ilm10b5.hg38)
head(ilm10b5.hg38)
# read in the sample sheet for the experiment
targets <- read.metharray.sheet(base = "output Erasmus MC/MET2020-244-014/STS", pattern="MET2020-244-014.csv")
# read in the sample sheet for the experiment
targets <- read.metharray.sheet(base = "Input", pattern="MET2020-244-014.csv")
targets # Basename column is not filled
View(targets)
targets$Basename <- paste0(targets$Slide,"_",targets$Array)
# read in the raw data from the IDAT files
rgSet <- read.metharray.exp(base = "idats", targets)
# read in the raw data from the IDAT files
rgSet <- read.metharray.exp(base = "Input/idats", targets)
sampleNames(rgSet) <- targets$Sample_Name # give the samples descriptive names
rgSet # Detects as 'IlluminaHumanMethylationEPIC' (correct afaik) but with 'ilm10b4.hg19' annotation
rgSet@annotation = c(array = "IlluminaHumanMethylationEPIC", annotation = "ilm10b5.hg38") # Force this annotation
annotation(rgSet)
# calculate the detection p-values
detP <- detectionP(rgSet)
head(detP)
table(targets$Array) # 8 different slides
table(targets$Slide) # 3 different arrays
# examine mean detection p-values across all samples to identify any failed samples
pal <- brewer.pal(8,"Dark2")
par(mfrow=c(1,2))
barplot(colMeans(detP), col=pal[factor(targets$Slide)], las=2,
cex.names=0.8, ylab="Mean detection p-values")
abline(h=0.05,col="red")
legend("topleft", legend=levels(factor(targets$Slide)), fill=pal,
bg="white")
barplot(colMeans(detP), col=pal[factor(targets$Slide)], las=2,
cex.names=0.8, ylim=c(0,0.002), ylab="Mean detection p-values")
abline(h=0.05,col="red")
legend("topleft", legend=levels(factor(targets$Slide)), fill=pal,
bg="white")
qcReport(rgSet, sampNames=targets$Sample_Name, sampGroups=targets$Slide, pdf="qcReport_Teun.pdf")
qcReport(rgSet, sampNames=targets$Sample_Name, sampGroups=targets$Slide, pdf="Output/qcReport.pdf")
warnings() # Type conversion errors, does not seem serious
# remove poor quality samples
keep <- colMeans(detP) < 0.05
rgSet <- rgSet[,keep]
rgSet # All 23 samples are OK
# normalize the data; this results in a GenomicRatioSet object
mSetSq <- preprocessQuantile(rgSet)
# create a MethylSet object from the raw data for plotting
mSetRaw <- preprocessRaw(rgSet)
# visualise what the data looks like before and after normalisation
par(mfrow=c(1,2))
densityPlot(rgSet, sampGroups=targets$Slide,main="Raw", legend=FALSE)
legend("top", legend = levels(factor(targets$Slide)),
text.col=brewer.pal(8,"Dark2"))
densityPlot(getBeta(mSetSq), sampGroups=targets$Slide,
main="Normalized", legend=FALSE)
legend("top", legend = levels(factor(targets$Slide)),
text.col=brewer.pal(8,"Dark2"))
par(mfrow=c(1,2))
plotMDS(getM(mSetSq), top=1000, gene.selection="common",
col=pal[factor(targets$Slide)])
legend("top", legend=levels(factor(targets$Slide)), text.col=pal,
bg="white", cex=0.7)
plotMDS(getM(mSetSq), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Source)])
legend("top", legend=levels(factor(targets$Slide)), text.col=pal,
bg="white", cex=0.7)
par(mfrow=c(1,3))
plotMDS(getM(mSetSq), top=1000, gene.selection="common",
col=pal[factor(targets$Slide)], dim=c(1,3))
legend("top", legend=levels(factor(targets$Slide)), text.col=pal,
cex=0.7, bg="white")
plotMDS(getM(mSetSq), top=1000, gene.selection="common",
col=pal[factor(targets$Slide)], dim=c(2,3))
legend("topleft", legend=levels(factor(targets$Slide)), text.col=pal,
cex=0.7, bg="white")
plotMDS(getM(mSetSq), top=1000, gene.selection="common",
col=pal[factor(targets$Slide)], dim=c(3,4))
legend("topright", legend=levels(factor(targets$Slide)), text.col=pal,
cex=0.7, bg="white")
# ensure probes are in the same order in the mSetSq and detP objects
detP <- detP[match(featureNames(mSetSq),rownames(detP)),]
# remove any probes that have failed in one or more samples
keep <- rowSums(detP < 0.01) == ncol(mSetSq)
table(keep) # Kept 829468 out of 865859 probes (95.8%);
mSetSqFlt <- mSetSq[keep,]
mSetSqFlt
# if your data includes males and females, remove probes on the sex chromosomes
keep <- !(featureNames(mSetSqFlt) %in% ilm10b5.hg38$Name[ilm10b5.hg38$chr %in% c("chrX","chrY")])
table(keep)
mSetSqFlt <- mSetSqFlt[keep,]
mSetSqFlt
featureNames(mSetSqFlt)
included_probe_indexes <-
c(
which(grepl("CYP3A4",ilm10b5.hg38[,"UCSC_RefGene_Name"]))
)
Included_probes <-
as.data.frame(ilm10b5.hg38[included_probe_indexes,colnames(ilm10b5.hg38)])
Included_probes <-
Included_probes[setdiff(x = 1:nrow(Included_probes), y = which(grepl("CYP3A43",Included_probes$UCSC_RefGene_Name))),]
Included_probes <-
Included_probes[,c("UCSC_RefGene_Name","Name","CHR_hg38","Start_hg38","End_hg38","Strand_hg38")]
Start_CYP3A4 <- 99756960
Included_probes$Relative_start <- as.integer(Included_probes$Start_hg38) - Start_CYP3A4
Included_probes$Relative_end <- as.integer(Included_probes$End_hg38) - Start_CYP3A4
Included_probes <-
Included_probes[order(Included_probes$Start_hg38),]
View(Included_probes)
All_beta_values <- getBeta(mSetSq)
All_beta_values <- t(All_beta_values[rownames(All_beta_values) %in% Included_probes$Name,])
All_M_values <- getM(mSetSq)
All_M_values <- t(All_M_values[rownames(All_M_values) %in% Included_probes$Name,])
rownames(Included_probes) <- 1:nrow(Included_probes)
colnames(Included_probes)[2] <- "Probe_name"
Included_probes <- Included_probes[order(Included_probes$Probe_name),]
All_beta_values <- All_beta_values[,order(colnames(All_beta_values))]
View(Included_probes)
write.table(Included_probes,  file = paste0("Output/Table_S1_Included_probes.csv"), row.names = F, sep = ";")
write.table(cor(All_beta_values),  file = paste0("Output/cor_All_beta_values.csv"), row.names = T, sep = ";")
write.table(cor(All_beta_values),  file = paste0("Output/Table_S3_cor_All_beta_values.csv"), row.names = T, sep = ";")
write.table(Included_probes,  file = paste0("Output/Table_S2_Included_probes.csv"), row.names = F, sep = ";")
saveAsCsv <- function(object, name){
CSV_output <- as.data.frame(object)
CSV_output$sample_name <- rownames(CSV_output)
CSV_output <- CSV_output[,c(ncol(CSV_output),1:(ncol(CSV_output)-1))]
write.table(CSV_output,  file = paste0("Output/",name,".csv"), row.names = F, sep = ";")
}
saveAsCsv(All_beta_values, "Output/All_beta_values")
saveAsCsv(All_beta_values, "All_beta_values")
saveAsCsv(All_M_values, "All_M_values")
View(All_beta_values)
library(readxl)
library(ggplot2)
library(lme4)
library(patchwork)
library(reshape2)
Final_analysis_input <-
read.csv("Output/Final_analysis_input.csv", sep=";")
library(readxl)
library(ggplot2)
library(lme4)
library(patchwork)
library(reshape2)
library(readxl)
library(ggplot2)
library(lme4)
library(patchwork)
library(reshape2)
Final_analysis_input <-
read.csv("Input/Final_analysis_input.csv", sep=";")
probeNames <-
colnames(Final_analysis_input)[startsWith(colnames(Final_analysis_input), "cg")]
Table_2 <- data.frame(
probeName = probeNames,
Mean_beta_value = NA,
SD_beta_value = NA,
Spearman_cor_estimate = NA,
Spearman_p.value = NA
)
for (i in 1:nrow(Table_2)){
spearman_input <-
Final_analysis_input[,c("AUC_norm",probeNames[i])]
Table_2[i,c("Mean_beta_value","SD_beta_value")] <-
c(mean(spearman_input[,probeNames[i]]), sd(spearman_input[,probeNames[i]]))
spearman_result <-
cor.test(x = spearman_input[,probeNames[i]], y = spearman_input$AUC_norm, method = "spearman")
Table_2[i,"Spearman_cor_estimate"] <- as.numeric(spearman_result$estimate)
Table_2[i,"Spearman_p.value"] <- spearman_result$p.value
}
Table_2 <- Table_2[order(Table_2$probeName),]
Table_2$Mean_beta_value <- signif(Table_2$Mean_beta_value,2)
Table_2$SD_beta_value <- signif(Table_2$SD_beta_value,2)
Table_2$Spearman_cor_estimate <- signif(Table_2$Spearman_cor_estimate,2)
write.table(Table_2,  file = paste0("Output/Tables/Table_2.csv"), row.names = F, sep = ";")
write.table(Table_2,  file = paste0("Output/Table_2.csv"), row.names = F, sep = ";")
View(Table_2)
plotList <- list()
for (probeName in Table_2$probeName){
tmp <- ggplot(data = Final_analysis_input, aes_string(x = probeName, y = "AUC_norm")) +
geom_point() + geom_smooth(method = "lm") + labs(
x = paste0("Beta value probe ",probeName),
y = expression({AUC['0-24h,norm']})
) + theme_minimal()
plotList[[probeName]] <- tmp
ggsave(
filename = paste0("Output/Figures/Exposure_vs_methylation_",probeName,".png"),
plot = tmp,
device = "png",
dpi = "retina"
)
}
plotList <- plotList[names(plotList) != "cg19046783"]
plotList[[1]] <- plotList[[1]] + ylab("")
plotList[[2]] <- plotList[[2]] + ylab("")
plotList[[3]] <- plotList[[3]] + ylab("")
plotList[[5]] <- plotList[[5]] + ylab("")
plotList[[6]] <- plotList[[6]] + ylab("")
plotList[[7]] <- plotList[[7]] + ylab("")
plotList[[8]] <- plotList[[8]] + ylab("")
plotList[[9]] <- plotList[[9]] + ylab("")
combined_plot <-  (plotList[[1]] + plotList[[2]] + plotList[[3]]) /
(plotList[[4]] + plotList[[5]] + plotList[[6]]) /
(plotList[[7]] + plotList[[8]] + plotList[[9]])
ggsave(
filename = paste0("Output/Figure_S2.png"),
plot = combined_plot,
device = "png",
dpi = "retina"
)
cor.test(x = Final_analysis_input$cg19046783, y = Final_analysis_input$AUC_norm, method = "pearson")
# Covariate test results (Table S1):
summary(lm(AUC_norm ~ HCT, data = Final_analysis_input))
summary(lm(AUC_norm ~ log(ALAT), data = Final_analysis_input))
summary(lm(AUC_norm ~ CRP_above_49, data = Final_analysis_input))
summary(lm(AUC_norm ~ Recipient_CYP3A4_star22_rs35599367, data = Final_analysis_input))
summary(lm(AUC_norm ~ Donor_CYP3A4_star22_rs35599367, data = Final_analysis_input))
